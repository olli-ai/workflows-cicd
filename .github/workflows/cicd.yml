on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      appName:
        required: true
        type: string
      approvers:
        required: true
        type: string
    secrets:
      GCP_CREDENTIALS:
        required: true
      SLACK_WEBHOOK:
        required: true
      TOKEN:
        required: true

env:
  # CI
  REGISTRY: asia-southeast1-docker.pkg.dev/olli-iviet
  IMAGE_NAME: ${{ inputs.imageName }}
  ENV_DEV: dev
  ENV_STG: stg
  ENV_PRE-PROD: uat
  ENV_PROD: prod
  # CD
  APP_NAME: ${{ inputs.appName }}

jobs:
  DEV:
    if: github.ref == 'refs/heads/dev'
    runs-on: Linux
    #runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true

      - name: Build & Tag & Push Docker image
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          docker build -t ${{env.IMAGE_NAME}}:${{env.TAG}} .
          docker tag ${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_DEV}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_DEV}}/${{env.IMAGE_NAME}}:${{env.TAG}}

      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Public endpoint"
        run: |
          gcloud run services add-iam-policy-binding  ${{env.ENV_DEV}}-${{env.APP_NAME}} \
          --member="allUsers" \
          --role="roles/run.invoker"

      - name: "Deploy new image"
        run: |
          sed -i -e 's|image: .*|image: '${{env.REGISTRY}}/${{env.ENV_DEV}}/${{env.IMAGE_NAME}}:${{env.TAG}}'|g' service-${{env.ENV_DEV}}.yaml
          gcloud run services replace --region asia-southeast1 service-${{env.ENV_DEV}}.yaml

      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy Service Dev: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-dev.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy Service Dev: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  STAGING:
    if: github.ref == 'refs/heads/master'
    runs-on: Linux 
    #runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true

      - name: Build & Tag & Push Docker image
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          docker build -t ${{env.IMAGE_NAME}}:${{env.TAG}} .
          docker tag ${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_STG}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_STG}}/${{env.IMAGE_NAME}}:${{env.TAG}}

      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Public endpoint"
        run: |
          gcloud run services add-iam-policy-binding  ${{env.ENV_STG}}-${{env.APP_NAME}} \
          --member="allUsers" \
          --role="roles/run.invoker"

      - name: "Deploy new image"
        run: |
          sed -i -e 's|image: .*|image: '${{env.REGISTRY}}/${{env.ENV_STG}}/${{env.IMAGE_NAME}}:${{env.TAG}}'|g' service-${{env.ENV_STG}}.yaml
          gcloud run services replace --region asia-southeast1 service-${{env.ENV_STG}}.yaml

      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy Service Staging: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-stg.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy Service Staging: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  PRODUCTION:
    if: github.ref == 'refs/heads/pre-production'
    runs-on: Linux
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true

      - name: Build & Tag & Push Docker image
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          docker build -t ${{env.IMAGE_NAME}}:${{env.TAG}} .
          docker tag ${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}

      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Public endpoint"
        run: |
          gcloud run services add-iam-policy-binding  ${{env.ENV_PRE-PROD}}-${{env.APP_NAME}} \
          --member="allUsers" \
          --role="roles/run.invoker"

      - name: "Deploy new image"
        run: |
          sed -i -e 's|image: .*|image: '${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}'|g' service-${{env.ENV_PRE-PROD}}.yaml
          gcloud run services replace --region asia-southeast1 service-${{env.ENV_PRE-PROD}}.yaml

      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy Service UAT: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-uat.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy Service UAT: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Trigger Deploy Service to Production
        #uses: trstringer/manual-approval@v1
        uses: olli-ai/manual-approval-action@master
        timeout-minutes: 1
        with:
          secret: ${{ secrets.TOKEN }}
          approvers: ${{ inputs.approvers }}
          minimum-approvals: 1

      - name: Change Tag Image Production
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          docker pull ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker tag ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}

      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Public endpoint"
        run: |
          gcloud run services add-iam-policy-binding  ${{env.ENV_PROD}}-${{env.APP_NAME}} \
          --member="allUsers" \
          --role="roles/run.invoker"

      - name: "Deploy new image"
        run: |
          sed -i -e 's|image: .*|image: '${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}'|g' service-${{env.ENV_PROD}}.yaml
          gcloud run services replace --region asia-southeast1 service-${{env.ENV_PROD}}.yaml

      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy Service Production: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-prod.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy Service Production: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} 
