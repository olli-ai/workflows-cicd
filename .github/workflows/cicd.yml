on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      appName:
        required: true
        type: string
    secrets:
      SLACK_WEBHOOK:
        required: true
      TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  EKS_CLUSTER: eks-primary-prod-01
  # CI
  REGISTRY: 905418372464.dkr.ecr.ap-southeast-1.amazonaws.com
  IMAGE_NAME: ${{ inputs.imageName }}
  ENV_DEV: dev
  ENV_STG: stg 
  ENV_PRE-PROD: uat
  ENV_PROD: prod
  # CD
  RELEASE_NAME: "chart-k8s"
  APP_NAME: ${{ inputs.appName }}
  NAMESPACE_DEV: "service-dev"
  NAMESPACE_STG: "service-staging"
  NAMESPACE_PRE-PROD: "service-uat"
  NAMESPACE_PROD: "service-production"

jobs:
  DEV:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true

      - name: Build & Tag & Push Docker image
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          DOCKER_BUILDKIT=0 docker build -t ${{env.IMAGE_NAME}}:${{env.TAG}} .
          docker tag ${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_DEV}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_DEV}}/${{env.IMAGE_NAME}}:${{env.TAG}}

      - name: Helm Deploy Service on dev
        id: 'helm-dev'
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          aws --region ap-southeast-1 eks update-kubeconfig --region ap-southeast-1 --name ${{env.EKS_CLUSTER}}
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          bash get_helm.sh
          helm pull oci://${{env.REGISTRY}}/helm-chart/all-service
          helm upgrade -n ${{ env.NAMESPACE_DEV }} ${{ env.APP_NAME }} oci://${{env.REGISTRY}}/helm-chart/all-service --install --wait -f values-dev.yaml --set tagImage=${{env.TAG}} --atomic --timeout 10m0s
            
      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy on ${{ env.ENV_DEV }}: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    
      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-dev.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy on ${{ env.ENV_DEV }}: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
     
  STAGING:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true

      - name: Build & Tag & Push Docker image
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          DOCKER_BUILDKIT=0 docker build -t ${{env.IMAGE_NAME}}:${{env.TAG}} .
          docker tag ${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_STG}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_STG}}/${{env.IMAGE_NAME}}:${{env.TAG}}

      - name: Helm Deploy Service on staging
        id: 'helm-stg'
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          aws --region ap-southeast-1 eks update-kubeconfig --region ap-southeast-1 --name ${{env.EKS_CLUSTER}}
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          bash get_helm.sh
          helm pull oci://${{env.REGISTRY}}/helm-chart/all-service
          helm upgrade -n ${{ env.NAMESPACE_STG }} ${{ env.APP_NAME }} oci://${{env.REGISTRY}}/helm-chart/all-service --install --wait -f values-stg.yaml --set tagImage=${{env.TAG}} --atomic --timeout 10m0s

      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy on ${{ env.ENV_DEV }}: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    
      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-stg.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy on ${{ env.ENV_DEV }}: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          
  UAT:
    if: github.ref == 'refs/heads/pre-production'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true

      - name: Build & Tag & Push Docker image
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          DOCKER_BUILDKIT=0 docker build -t ${{env.IMAGE_NAME}}:${{env.TAG}} .
          docker tag ${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}

      - name: Helm Deploy Service on uat
        id: 'helm-uat'
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          aws --region ap-southeast-1 eks update-kubeconfig --region ap-southeast-1 --name ${{env.EKS_CLUSTER}}
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          bash get_helm.sh
          helm pull oci://${{env.REGISTRY}}/helm-chart/all-service
          helm upgrade -n ${{ env.NAMESPACE_PRE-PROD }} ${{ env.APP_NAME }} oci://${{env.REGISTRY}}/helm-chart/all-service --install --wait -f values-uat.yaml --set tagImage=${{env.TAG}} --atomic --timeout 10m0s
            
      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy on ${{ env.ENV_PRE-PROD }}: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    
      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-uat.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy on ${{ env.ENV_PRE-PROD }}: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                    
      # - name: Trigger Deploy Service to Production
      #   #uses: trstringer/manual-approval@v1
      #   uses: olli-ai/manual-approval-action@master
      #   timeout-minutes: 1
      #   with:
      #     secret: ${{ secrets.TOKEN }}
      #     approvers: ${{ inputs.approvers }}
      #     minimum-approvals: 1
      
      - name: Change Tag Image Production
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          docker pull ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker tag ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}} 
          docker push ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker tag ${{env.REGISTRY}}/${{env.ENV_PRE-PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:latest
          docker push ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:latest
    # outputs:
    #   output1: ${{ steps.version.outputs.version }}
      
  PRODUCTION:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true

      - name: Get latest image
        env:        
          TAG: latest
          NEW_TAG: ${{steps.version.outputs.version}}
        run: |
          docker pull ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}}
          docker tag ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.NEW_TAG}}
          docker push ${{env.REGISTRY}}/${{env.ENV_PROD}}/${{env.IMAGE_NAME}}:${{env.NEW_TAG}}

      - name: Helm Deploy Service on Production
        id: 'helm-prod'
        env:
          TAG: ${{steps.version.outputs.version}}
        run: |
          aws --region ap-southeast-1 eks update-kubeconfig --region ap-southeast-1 --name ${{env.EKS_CLUSTER}}
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          bash get_helm.sh
          helm pull oci://${{env.REGISTRY}}/helm-chart/all-service
          helm upgrade -n ${{ env.NAMESPACE_PROD }} ${{ env.APP_NAME }} oci://${{env.REGISTRY}}/helm-chart/all-service --install --wait -f values-prod.yaml --set tagImage=${{env.TAG}} --atomic --timeout 10m0s

      - name: Slack Notification Success
        if: ${{ success() }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':bell: FINISHED'
          SLACK_TITLE: 'Status Deploy Service Production: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Slack Notification Failed
        if: ${{ failure() && steps.helm-prod.conclusion == 'failure' }}
        #uses: rtCamp/action-slack-notify@v2
        uses: olli-ai/slack-notify-action-gke@master
        env:
          SLACK_CHANNEL: alert-services
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: ':x: ERROR'
          SLACK_TITLE: 'Status Deploy Service Production: ${{ env.APP_NAME }}'
          SLACK_USERNAME: devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
